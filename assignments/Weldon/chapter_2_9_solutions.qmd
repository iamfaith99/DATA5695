---
title: "Chapter 2 and 9 Solutions"
format:
  html:
    code-fold: false
    fig-width: 8
    fig-height: 6
    fig-dpi: 300
    fig-format: png
---

```{python}
#| label: setup
#| include: false

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

def set_plot_style():
    plt.style.use('default')  # Using default style instead of seaborn
    plt.rcParams['figure.figsize'] = [8, 6]
    plt.rcParams['figure.dpi'] = 300
    plt.rcParams['figure.constrained_layout.use'] = True
    plt.rcParams['axes.grid'] = True
    plt.rcParams['axes.axisbelow'] = True
    plt.rcParams['grid.linestyle'] = '--'
    plt.rcParams['grid.alpha'] = 0.5

set_plot_style()
```

## Problem 2.1: Long Stock Position

A long position in XYZ stock with initial price $50 and 10% interest rate:

```{python}
#| label: prob-2-1
#| fig-width: 8
#| fig-height: 6

initial_price = 50
r = 0.10  
investment_cost = initial_price * (1 + r)

prices = np.linspace(0, 100, 100)
payoffs = prices
profits = prices - investment_cost

plt.figure(figsize=(8, 6))
plt.plot(prices, payoffs, label='Payoff', linewidth=2)
plt.plot(prices, profits, label='Profit', linewidth=2)
plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.title('Long Stock Position (Initial Price = $50)')
plt.xlabel('Stock Price')
plt.ylabel('Value ($)')
plt.legend()
plt.grid(True)
plt.legend()

# Verify profit at $55
price_55 = 55
profit_55 = price_55 - investment_cost
print(f"Profit at $55: ${profit_55:.2f}")
```

At a price of $55 in one year, the profit is approximately $0, verifying our calculation.

## Problem 2.2: Short Stock Position

A short position in XYZ stock:

```{python}
#| label: prob-2-2
#| fig-width: 8
#| fig-height: 6

payoffs = -prices
profits = -prices + investment_cost

plt.figure(figsize=(8, 6))
plt.plot(prices, payoffs, label='Payoff', linewidth=2)
plt.plot(prices, profits, label='Profit', linewidth=2)
plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.title('Short Stock Position (Initial Price = $50)')
plt.xlabel('Stock Price')
plt.ylabel('Value ($)')
plt.legend()
plt.grid(True)
plt.legend()

# Verify profit at $55
profit_55 = -price_55 + investment_cost
print(f"Profit at $55: ${profit_55:.2f}")
```

The profit at $55 is approximately $0, which verifies our calculation.

## Problem 2.3: Option Position Opposites

The opposite positions are:
1. Purchased (long) call → Written (short) call
2. Purchased (long) put → Written (short) put

Visual demonstration:

```{python}
#| label: prob-2-3
#| fig-width: 12
#| fig-height: 5
#| warning: false

strike = 50
premium = 5
prices = np.linspace(0, 100, 100)

# Call options
long_call_payoffs = np.maximum(prices - strike, 0)
long_call_profits = long_call_payoffs - premium
short_call_profits = -long_call_payoffs + premium

# Put options
long_put_payoffs = np.maximum(strike - prices, 0)
long_put_profits = long_put_payoffs - premium
short_put_profits = -long_put_payoffs + premium

# Create figure with proper spacing
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))
fig.tight_layout(pad=3.0)

# Plot calls
ax1.plot(prices, long_call_profits, label='Long Call')
ax1.plot(prices, short_call_profits, label='Short Call')
ax1.set_title('Long vs Short Call')
ax1.grid(True, alpha=0.3)
ax1.legend()

# Plot puts
ax2.plot(prices, long_put_profits, label='Long Put')
ax2.plot(prices, short_put_profits, label='Short Put')
ax2.set_title('Long vs Short Put')
ax2.grid(True, alpha=0.3)
ax2.legend()
```

## Problem 2.4: Forward vs Call Option

Comparing a long forward position with a long call option:

```{python}
#| label: prob-2-4
#| fig-width: 8
#| fig-height: 6

forward_price = 50
strike = 50
test_prices = [40, 45, 50, 55, 60]

# Calculate payoffs
results = pd.DataFrame({
    'Price': test_prices,
    'Forward Payoff': [p - forward_price for p in test_prices],
    'Call Payoff': [max(p - strike, 0) for p in test_prices]
})

print("Payoff Comparison:")
print(results)

# Visualize payoffs
prices = np.linspace(30, 70, 100)
forward_payoffs = prices - forward_price
call_payoffs = np.maximum(prices - strike, 0)

plt.figure(figsize=(8, 6))
plt.plot(prices, forward_payoffs, label='Long Forward')
plt.plot(prices, call_payoffs, label='Long Call')
plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.title('Forward vs Call Option Payoffs')
plt.xlabel('Price')
plt.ylabel('Payoff')
plt.legend()
plt.grid(True)
plt.legend()
```

The long call should be less expensive than the long forward because:
1. The call option limits downside risk while maintaining upside potential
2. The call holder has the right, but not obligation, to exercise
3. The forward holder must take delivery at the forward price

## Problem 2.5: Short Forward vs Put Option

Comparing a short forward position with a long put option:

```{python}
#| label: prob-2-5
#| fig-width: 8
#| fig-height: 6

results = pd.DataFrame({
    'Price': test_prices,
    'Short Forward Payoff': [forward_price - p for p in test_prices],
    'Put Payoff': [max(strike - p, 0) for p in test_prices]
})

print("Payoff Comparison:")
print(results)

short_forward_payoffs = forward_price - prices
put_payoffs = np.maximum(strike - prices, 0)

plt.figure(figsize=(8, 6))
plt.plot(prices, short_forward_payoffs, label='Short Forward')
plt.plot(prices, put_payoffs, label='Long Put')
plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.title('Short Forward vs Put Option Payoffs')
plt.xlabel('Price')
plt.ylabel('Payoff')
plt.legend()
plt.grid(True)
plt.legend()
```

The long put should be less expensive than the short forward because:
1. The put option provides limited upside potential
2. The put holder has the right, but not obligation, to exercise
3. The forward position requires delivery at the forward price

## Problem 2.6: Zero-Coupon Bond

Analysis of a zero-coupon bond with current price $91 and future value $100:

```{python}
#| label: prob-2-6
#| fig-width: 8
#| fig-height: 6

current_price = 91
future_value = 100

# Calculate effective annual interest rate
r = (future_value / current_price) - 1
print(f"Effective annual interest rate: {r:.2%}")

time_points = np.linspace(0, 2, 100)
payoffs = np.full_like(time_points, future_value)
profits = payoffs - current_price * (1 + r) ** time_points

plt.figure(figsize=(8, 6))
plt.plot(time_points, payoffs, label='Payoff')
plt.plot(time_points, profits, label='Profit')
plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
plt.axvline(x=1, color='k', linestyle='--', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.title('Zero-Coupon Bond Payoff and Profit')
plt.xlabel('Time (years)')
plt.ylabel('Value ($)')
plt.legend()
plt.grid(True)
plt.legend()
```

The effective annual interest rate is approximately 9.89%.

## Problem 2.13: Multiple Call Options

Analysis of call options with different strikes when stock price is $40:

```{python}
#| label: prob-2-13
#| fig-width: 8
#| fig-height: 6

stock_price = 40
strikes = [35, 40, 45]
premiums = [9.12, 6.22, 4.08]
prices = np.linspace(20, 60, 100)

plt.figure(figsize=(8, 6))

for strike, premium in zip(strikes, premiums):
    profits = np.maximum(prices - strike, 0) - premium
    plt.plot(prices, profits, label=f'Strike=${strike}, Premium=${premium}')

plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
plt.axvline(x=stock_price, color='k', linestyle='--', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.title('Call Options with Different Strikes')
plt.xlabel('Stock Price')
plt.ylabel('Profit')
plt.legend()
plt.grid(True)
plt.legend()
```

The option premium decreases with strike price because:
1. Higher strikes require larger price increases to become profitable
2. The probability of exercise decreases with higher strikes
3. The intrinsic value decreases with higher strikes

## Problem 2.14: Multiple Put Options

Analysis of put options with different strikes when stock price is $40:

```{python}
#| label: prob-2-14
#| fig-width: 8
#| fig-height: 6

strikes = [35, 40, 45]
premiums = [1.53, 3.26, 5.75]

plt.figure(figsize=(8, 6))

for strike, premium in zip(strikes, premiums):
    profits = np.maximum(strike - prices, 0) - premium
    plt.plot(prices, profits, label=f'Strike=${strike}, Premium=${premium}')

plt.axhline(y=0, color='k', linestyle='--', alpha=0.3)
plt.axvline(x=stock_price, color='k', linestyle='--', alpha=0.3)
plt.grid(True, alpha=0.3)
plt.title('Put Options with Different Strikes')
plt.xlabel('Stock Price')
plt.ylabel('Profit')
plt.legend()
plt.grid(True)
plt.legend()
```

The option premium increases with strike price because:
1. Higher strikes provide more downside protection
2. The probability of exercise increases with higher strikes
3. The intrinsic value increases with higher strikes

## Problem 2.16: Option Calculator Program

```{python}
#| label: prob-2-16
#| fig-width: 12
#| fig-height: 10

def calculate_payoff_profit(position_type, params):
    """
    Calculate payoff and profit for various option positions
    
    Parameters:
    position_type: str ('stock', 'forward', 'call', 'put')
    params: dict containing relevant parameters
    """
    S = np.linspace(0, 2*params.get('S0', 100), 100)  # Stock prices
    
    if position_type == 'stock':
        payoff = S if params['is_long'] else -S
        profit = payoff - params['S0']*(1 + params['r']) if params['is_long'] else -payoff - params['S0']*(1 + params['r'])
    
    elif position_type == 'forward':
        payoff = (S - params['K']) if params['is_long'] else -(S - params['K'])
        profit = payoff  # No upfront premium for forward
        
    elif position_type == 'call':
        payoff = np.maximum(S - params['K'], 0) if params['is_long'] else -np.maximum(S - params['K'], 0)
        profit = payoff - params['premium'] if params['is_long'] else -payoff + params['premium']
        
    elif position_type == 'put':
        payoff = np.maximum(params['K'] - S, 0) if params['is_long'] else -np.maximum(params['K'] - S, 0)
        profit = payoff - params['premium'] if params['is_long'] else -payoff + params['premium']
    
    return S, payoff, profit

# Example usage
params = {
    'S0': 50,      # Current stock price
    'K': 52,       # Strike price
    'r': 0.05,     # Interest rate
    'premium': 3,   # Option premium
    'is_long': True # Long position
}

# Create subplots for all position types with constrained layout
fig = plt.figure(figsize=(12, 10), constrained_layout=True)
gs = fig.add_gridspec(2, 2)

# Stock positions
ax1 = fig.add_subplot(gs[0, 0])
S, payoff, profit = calculate_payoff_profit('stock', {**params, 'is_long': True})
ax1.plot(S, payoff, label='Long Payoff')
ax1.plot(S, profit, label='Long Profit')
S, payoff, profit = calculate_payoff_profit('stock', {**params, 'is_long': False})
ax1.plot(S, payoff, label='Short Payoff')
ax1.plot(S, profit, label='Short Profit')
ax1.set_title('Stock Positions')
ax1.grid(True)
ax1.legend()

# Forward positions
ax2 = fig.add_subplot(gs[0, 1])
S, payoff, profit = calculate_payoff_profit('forward', {**params, 'is_long': True})
ax2.plot(S, payoff, label='Long Payoff')
ax2.plot(S, profit, label='Long Profit')
S, payoff, profit = calculate_payoff_profit('forward', {**params, 'is_long': False})
ax2.plot(S, payoff, label='Short Payoff')
ax2.plot(S, profit, label='Short Profit')
ax2.set_title('Forward Positions')
ax2.grid(True)
ax2.legend()

# Call options
ax3 = fig.add_subplot(gs[1, 0])
S, payoff, profit = calculate_payoff_profit('call', {**params, 'is_long': True})
ax3.plot(S, payoff, label='Long Payoff')
ax3.plot(S, profit, label='Long Profit')
S, payoff, profit = calculate_payoff_profit('call', {**params, 'is_long': False})
ax3.plot(S, payoff, label='Short Payoff')
ax3.plot(S, profit, label='Short Profit')
ax3.set_title('Call Options')
ax3.grid(True)
ax3.legend()

# Put options
ax4 = fig.add_subplot(gs[1, 1])
S, payoff, profit = calculate_payoff_profit('put', {**params, 'is_long': True})
ax4.plot(S, payoff, label='Long Payoff')
ax4.plot(S, profit, label='Long Profit')
S, payoff, profit = calculate_payoff_profit('put', {**params, 'is_long': False})
ax4.plot(S, payoff, label='Short Payoff')
ax4.plot(S, profit, label='Short Profit')
ax4.set_title('Put Options')
ax4.grid(True)
ax4.legend()
```

## Problem 9.1: Put-Call Parity with Dividends

```{python}
#| label: prob-9-1
#| fig-width: 8
#| fig-height: 6

def call_payoff(S, K):
    return np.maximum(S - K, 0)

def put_payoff(S, K):
    return np.maximum(K - S, 0)

# Given parameters
S0 = 32.00
K = 35.00
T = 0.5
r = 0.04
q = 0.06
C = 2.27

# Calculate put price using parity
P = C - S0 * np.exp(-q * T) + K * np.exp(-r * T)

# Generate stock price range
S = np.linspace(20, 50, 100)

# Create figure with subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

# Plot 1: Payoff diagrams
ax1.plot(S, call_payoff(S, K), label=f'Call Payoff (K={K})', color='blue')
ax1.plot(S, put_payoff(S, K), label=f'Put Payoff (K={K})', color='red')
ax1.axvline(K, color='black', linestyle='--', alpha=0.5, label='Strike Price')
ax1.set_title('Option Payoffs at Expiration')
ax1.set_xlabel('Stock Price')
ax1.set_ylabel('Payoff')
ax1.legend()
ax1.grid(True)

# Plot 2: Put-call parity relationship
ax2.plot(S, call_payoff(S, K) - C, label='Call Profit', color='blue', linestyle='--')
ax2.plot(S, put_payoff(S, K) - P, label=f'Put Profit (P={P:.2f})', color='red', linestyle='--')
ax2.axvline(S0, color='green', linestyle=':', label=f'Current Price (S0={S0})')
ax2.axhline(0, color='black', alpha=0.5)
ax2.set_title('Profit Diagrams with Put-Call Parity')
ax2.set_xlabel('Stock Price')
ax2.set_ylabel('Profit')
ax2.legend()
ax2.grid(True)

# Add parity calculation annotation
print(
    "Put-Call Parity Result:\n"
    f"P = C - S₀e^(-qT) + Ke^(-rT)\n"
    f"P = {C:.2f} - {S0:.2f}e^(-{q:.2f}×{T}) + {K:.2f}e^(-{r:.2f}×{T})\n"
    f"P = {P:.2f}"
)

plt.tight_layout()
```

## Problem 9.2: Present Value of Dividends

```{python}
#| label: prob-9-2
#| fig-width: 8
#| fig-height: 6

def call_payoff(S, K):
    return np.maximum(S - K, 0)

def put_payoff(S, K):
    return np.maximum(K - S, 0)

# Given parameters
S0 = 32.00
K = 30.00
T = 0.5  # 6 months
r = 0.04  # 4% continuous risk-free rate
C = 4.29  # Call premium
P = 2.64  # Put premium

# Calculate present value of dividends using parity
discounted_strike = K * np.exp(-r * T)
S0_term = C - P + discounted_strike
PV_div = S0 - S0_term

# Generate stock price range
S = np.linspace(20, 40, 100)

# Create figure with subplots
fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))

# Plot 1: Payoff diagrams
ax1.plot(S, call_payoff(S, K), label=f'Call Payoff (K={K})', color='blue')
ax1.plot(S, put_payoff(S, K), label=f'Put Payoff (K={K})', color='red')
ax1.axvline(K, color='black', linestyle='--', alpha=0.5, label='Strike Price')
ax1.set_title('Option Payoffs at Expiration')
ax1.set_xlabel('Stock Price')
ax1.set_ylabel('Payoff')
ax1.legend()
ax1.grid(True)

# Plot 2: Profit diagrams
ax2.plot(S, call_payoff(S, K) - C, label=f'Call Profit (Premium=${C})', color='blue', linestyle='--')
ax2.plot(S, put_payoff(S, K) - P, label=f'Put Profit (Premium=${P})', color='red', linestyle='--')
ax2.axvline(S0, color='green', linestyle=':', label=f'Current Price (S0=${S0})')
ax2.axhline(0, color='black', alpha=0.5)
ax2.set_title('Profit Diagrams')
ax2.set_xlabel('Stock Price')
ax2.set_ylabel('Profit')
ax2.legend()
ax2.grid(True)

# Add parity calculation annotation
print(
    "Dividend Calculation via Put-Call Parity:\n\n"
    f"1. Discounted Strike = K·e^(-rT) = {K}·e^(-{r}×{T}) = ${discounted_strike:.2f}\n"
    f"2. S₀e^(-qT) = C - P + Ke^(-rT) = {C} - {P} + {discounted_strike:.2f} = ${S0_term:.2f}\n"
    f"3. PV(Dividends) = S₀ - S₀e^(-qT) = {S0} - {S0_term:.2f} = \033[1m${PV_div:.2f}\033[0m"
)

plt.tight_layout()
```

## Problem 9.3: Index Option Strategy

```{python}
#| label: prob-9-3
#| fig-width: 8
#| fig-height: 6

# Parameters
S0 = 800
K = 815
r = 0.05
T = 1
C = 75
P = 45

# a. Rate of Return
initial_cost = S0 - C + P
guaranteed_value = K
simple_return = (guaranteed_value / initial_cost) - 1
continuous_return = np.log(guaranteed_value / initial_cost) / T

print("a. Rate of Return:")
print(f"Initial Cost: ${initial_cost}")
print(f"Guaranteed Value: ${guaranteed_value}")
print(f"Simple Return: {simple_return:.2%}")
print(f"Continuous Return: {continuous_return:.2%}\n")

# b. Arbitrage Check
theoretical_diff = S0 - K * np.exp(-r * T)
actual_diff = C - P
arbitrage_profit = (initial_cost * np.exp(r * T)) - guaranteed_value

print("b. Arbitrage Check:")
print(f"Theoretical C-P: ${theoretical_diff:.2f}")
print(f"Actual C-P: ${actual_diff:.2f}")
print(f"Arbitrage Profit: ${arbitrage_profit:.2f}\n")

# c. Arbitrage-Free Difference
print("c. Arbitrage-Free C-P Difference:")
print(f"${theoretical_diff:.2f}\n")

# d. Arbitrage-Free Differences for Various Strikes
strikes = [780, 800, 820, 840]
arb_free_diffs = [S0 - K * np.exp(-r * T) for K in strikes]

print("d. Arbitrage-Free Differences:")
for K, diff in zip(strikes, arb_free_diffs):
    print(f"Strike ${K}: ${diff:.2f}")

# Plot Arbitrage-Free Differences
plt.figure(figsize=(10, 6))
plt.plot(strikes, arb_free_diffs, 'bo-')
plt.title('Arbitrage-Free Call-Put Price Differences')
plt.xlabel('Strike Price')
plt.ylabel('C - P Difference')
plt.axhline(0, color='k', linestyle='--')
plt.grid(True)
plt.show()

# Strategy Payoff Diagram
S = np.linspace(700, 900, 100)
stock_payoff = S - S0
short_call_payoff = -np.maximum(S - K, 0) + C
long_put_payoff = np.maximum(K - S, 0) - P
total_payoff = stock_payoff + short_call_payoff + long_put_payoff

plt.figure(figsize=(10, 6))
plt.plot(S, stock_payoff, label='Long Stock', alpha=0.7)
plt.plot(S, short_call_payoff, label='Short Call', alpha=0.7)
plt.plot(S, long_put_payoff, label='Long Put', alpha=0.7)
plt.plot(S, total_payoff, 'k--', label='Total Strategy', linewidth=2)
plt.axhline(0, color='k', linestyle='--', alpha=0.3)
plt.axvline(K, color='k', linestyle='--', alpha=0.3, label='Strike Price')
plt.title('Strategy Payoff Diagram')
plt.xlabel('Stock Price at Expiration')
plt.ylabel('Profit')
plt.legend()
plt.grid(True)
```

## Problem 9.8: Put-Call Parity Violation

```{python}
#| label: prob-9-8
#| fig-width: 8
#| fig-height: 6

# Define strike prices and premiums
K1, C1 = 50, 9
K2, C2 = 55, 10

# Stock price range at expiration
S = np.linspace(40, 70, 100)

# Payoff from long 50 call
payoff_long_call = np.maximum(S - K1, 0)
# Payoff from short 55 call
payoff_short_call = -np.maximum(S - K2, 0)

# Total payoff and profit (including net credit)
total_payoff = payoff_long_call + payoff_short_call
net_credit = C2 - C1  # +1
profit = total_payoff + net_credit

# Plotting
plt.figure(figsize=(10,6))
plt.plot(S, profit, label='Profit')
plt.axhline(y=0, color='k', linestyle='--')
plt.xlabel('Stock Price at Expiration')
plt.ylabel('Profit')
plt.title('Arbitrage Opportunity with Bull Call Spread')
plt.legend()
plt.grid(True)
```

## Problem 9.9: Put-Call Parity Violation

```{python}
#| label: prob-9-9
#| fig-width: 8
#| fig-height: 6

# Parameters
K1 = 50
K2 = 55
C1 = 16
C2 = 10
net_credit = C1 - C2  # = 6

# Stock price range at expiration
S_T = np.linspace(0, 100, 500)

# Payoff from the spread
payoff_short_50 = -np.maximum(S_T - K1, 0)  # Short 50-call
payoff_long_55 = np.maximum(S_T - K2, 0)    # Long 55-call
total_payoff = payoff_short_50 + payoff_long_55

# Profit = Payoff + Net Credit
profit = total_payoff + net_credit

# Plot
plt.figure(figsize=(10, 6))
plt.plot(S_T, profit, label='Arbitrage Profit', color='blue')
plt.axhline(y=1, color='red', linestyle='--', label='Minimum Profit ($1)')
plt.xlabel('Stock Price at Expiration ($)')
plt.ylabel('Profit ($)')
plt.title('Arbitrage Profit from Selling Bull Call Spread')
plt.legend()
plt.grid(True)
```

## Problem 9.10: Call Spread Convexity Violation

```{python}
#| label: prob-9-10
#| fig-width: 8
#| fig-height: 6

# Given data
strikes = [50, 55, 60]
call_premiums = [18, 14, 9.50]
put_premiums = [7, 10.75, 14.45]

# Butterfly spread calculations for calls
butterfly_call_cost = call_premiums[0] + call_premiums[2] - 2 * call_premiums[1]
print(f"Call Butterfly Cost: {butterfly_call_cost}")

# Butterfly spread calculations for puts
butterfly_put_cost = put_premiums[0] + put_premiums[2] - 2 * put_premiums[1]
print(f"Put Butterfly Cost: {butterfly_put_cost:.2f}")

# Plotting payoff for call butterfly
S = np.linspace(40, 70, 100)
payoff_call = np.maximum(S - 50, 0) - 2 * np.maximum(S - 55, 0) + np.maximum(S - 60, 0)
profit_call = payoff_call + butterfly_call_cost  # Initial cost is negative (credit)

plt.figure(figsize=(10, 6))
plt.plot(S, profit_call, label='Call Butterfly Profit')
plt.axhline(0, color='black', linestyle='--')
plt.title('Profit Diagram for Call Butterfly Spread')
plt.xlabel('Stock Price')
plt.ylabel('Profit')
plt.legend()
plt.grid(True)
```

## Problem 9.11: Put Spread Convexity Violation

```{python}
#| label: prob-9-11
#| fig-width: 8
#| fig-height: 6

# Strikes and premiums
strikes = [80, 100, 105]
put_premiums = [4, 21, 24.80]

# Arbitrage strategy parameters
sell_qty = 5  # Sell 100-strike puts
buy_low_qty = 1  # Buy 80-strike puts
buy_high_qty = 4  # Buy 105-strike puts

# Generate stock prices at expiration
S = np.linspace(50, 110, 1000)

# Calculate payoffs
payoff = np.zeros_like(S)
for i, s in enumerate(S):
    # Payoff from bought puts
    payoff_low = buy_low_qty * max(80 - s, 0)
    payoff_high = buy_high_qty * max(105 - s, 0)
    # Payoff from sold puts
    payoff_sold = sell_qty * max(100 - s, 0)
    # Total payoff
    payoff[i] = payoff_low + payoff_high - payoff_sold

# Total profit includes initial cash inflow
profit = payoff + 1.80

# Plot
plt.figure(figsize=(10,6))
plt.plot(S, profit, label='Profit')
plt.axhline(0, color='k', linestyle='--')
plt.xlabel('Stock Price at Expiration')
plt.ylabel('Profit')
plt.title('Arbitrage Strategy Profit Diagram')
plt.legend()
plt.grid(True)
```

## Problem 9.12: Call Spread Arbitrage

```{python}
#| label: prob-9-12
#| fig-width: 8
#| fig-height: 6

# Part a
S_T = np.linspace(80, 110, 100)
payoff_short_90 = -np.maximum(S_T - 90, 0)
payoff_long_95 = np.maximum(S_T - 95, 0)
total_payoff_a = payoff_short_90 + payoff_long_95
premium_a = 10 - 4
profit_a = total_payoff_a + premium_a

plt.figure(figsize=(10,6))
plt.plot(S_T, profit_a)
plt.axhline(0, color='black', linewidth=0.5)
plt.title('Part a: Arbitrage Profit Diagram')
plt.xlabel('Stock Price at Expiration')
plt.ylabel('Profit')
plt.grid(True)
plt.show()

# Part b
premium_b = 10 - 5.25
r = 0.10
T = 2
investment_proceeds = premium_b * np.exp(r * T)

total_payoff_b = payoff_short_90 + payoff_long_95
profit_b = investment_proceeds + total_payoff_b

plt.figure(figsize=(10,6))
plt.plot(S_T, profit_b)
plt.axhline(0, color='black', linewidth=0.5)
plt.title('Part b: Arbitrage Profit Diagram with Interest')
plt.xlabel('Stock Price at Expiration')
plt.ylabel('Profit')
plt.grid(True)
plt.show()

# Part c
S_T_c = np.linspace(80, 110, 100)
payoff_long_90 = (1/3) * np.maximum(S_T_c - 90, 0)
payoff_long_105 = (2/3) * np.maximum(S_T_c - 105, 0)
payoff_short_100 = -np.maximum(S_T_c - 100, 0)
total_payoff_c = payoff_long_90 + payoff_long_105 + payoff_short_100
premium_c = 10 - (15/3 + 6*(2/3))
profit_c = total_payoff_c + premium_c

plt.figure(figsize=(10,6))
plt.plot(S_T_c, profit_c)
plt.axhline(0, color='black', linewidth=0.5)
plt.title('Part c: Asymmetric Butterfly Arbitrage Profit')
plt.xlabel('Stock Price at Expiration')
plt.ylabel('Profit')
plt.grid(True)
```

## Problem 9.15: Calendar Spread Arbitrage

```{python}
#| label: prob-9-15
#| fig-width: 8
#| fig-height: 6

# Parameters
S0 = 100
r = 0.05
T1 = 1
T2 = 1.5
K1 = 100 * np.exp(r * T1)
K2 = 100 * np.exp(r * T2)
C1 = 11.924
C2 = 11.50

# Arbitrage strategy cash flows
initial_cash = C1 - C2  # +0.424
invested_cash_T1 = initial_cash * np.exp(r * T1)  # Grows to ~0.446

# Simulate stock prices at T1
S_T1 = np.linspace(80, 130, 100)

# Calculate liability from short call at T1
liability = np.maximum(S_T1 - K1, 0)

# Value of 1.5-year call at T1 (lower bound)
C2_value_T1 = np.maximum(S_T1 - K2 * np.exp(-r * (T2 - T1)), 0)

# Net cash at T1 after covering liability
net_cash_T1 = invested_cash_T1 - liability + C2_value_T1

# Plot
plt.figure(figsize=(10,6))
plt.plot(S_T1, net_cash_T1, label='Net Cash at T1')
plt.axhline(y=invested_cash_T1, color='r', linestyle='--', label='Minimum Profit')
plt.xlabel('Stock Price at T1 ($)')
plt.ylabel('Profit ($)')
plt.title('Arbitrage Profit at T1')
plt.legend()
plt.grid(True)
```
